#pragma kernel VATWriter
#pragma kernel VATReader

struct vertex
{
    float3 position;
    float3 normal;
    float4 tangent;
};

RWTexture2D<float4> result;
RWStructuredBuffer<vertex> gpuVertices;
RWStructuredBuffer<float2> gpuUV2;
int frameWidth;
float2 startPixel;

[numthreads(512,1,1)]
void VATWriter (uint3 id : SV_DispatchThreadID)
{
    float2 localCoords = float2(id.x % frameWidth, id.x / frameWidth);
    localCoords.x += startPixel.x;
    localCoords.y += startPixel.y;
    result[localCoords] = float4(gpuVertices[id.x].position, 1);
    // float offset = 1.0f / 7794 * 0.5f;
    // localCoords /= frameWidth;
    // gpuUV2[id.x] = float2(localCoords.x + offset, localCoords.y + offset);
}

[numthreads(512,1,1)]
void VATReader (uint3 id : SV_DispatchThreadID)
{
    float2 localCoords = float2(id.x % frameWidth, id.x / frameWidth);
    localCoords.x += startPixel.x;
    localCoords.y += startPixel.y;
    gpuVertices[id.x].position = result[localCoords].rgb;
}
